blueprint:
  name: Reolink Camera Notification
  description: A blueprint for generating notifications based on Reolink camera triggers.  This requires that the Fetch Latest File (v2.0.0 or newer), a default AI entity, and Reolink integrations are installed.  It also assumes that the images and videos that the Reolink camera pushes via FTP can be accessed via HTTP/HTTPS. 
  domain: automation
  input:
    trigger_sensors:
      name: Binary Sensors that will trigger a notification
      description: The entities that will trigger the automation.  Typically these would be the sensors from the Reolink camera.
      default:
        - binary_sensor.reolink_outdoorgarageeast_person
        - binary_sensor.reolink_outdoorgarageeast_vehicle
        - binary_sensor.reolink_outdoorgarageeast_animal
      selector:
        entity:
          multiple: true
          domain: binary_sensor
    trigger_icons:
      name: Trigger Icons
      description: The icons to use for each trigger entity (in the same order).  For example, if the first entity above is for "person", the first icon in this list would be the one you want to appear when that "person" entity was the trigger.  Note that you MUST have as many icons here as you have entities above or things will break.  (When you run this Automation manually, the icon will be a warning icon since there is no sensor that triggered it.)
      default:
        - "mdi:walk"
        - "mdi:car-side"
        - "mdi:rabbit"
      selector:
        select:
          multiple: true
          custom_value: true
          options:
            - "mdi:walk"
            - "mdi:car-side"
            - "mdi:rabbit"
    action_delay:
      name: Warmup Delay
      description: The delay in seconds before a notification is sent.  This should be enough time for the camera to upload a snapshot or two.
      default:
        hours: 0
        minutes: 0
        seconds: 3
      selector:
        duration:
    final_delay:
      name: Cooldown Time
      description: The delay seconds after the notification is sent before any further notifications will be sent.
      default:
        hours: 0
        minutes: 1
        seconds: 0
      selector:
        duration:
    ftp_directory:
      name: FTP Directory
      description: The directory where the image and video will be uploaded to, as seen by Home Assistant and the web server.
      default: /ftproot
    ftp_filename:
      name: FTP Filename
      description: The filename prefix of the images and videos to be fetched.  Usually this will be what you configured the Reolink camera name to be.
      default: Reolink-OutdoorGarageEast
    url_root:
      name: URL root
      description: The URL that can be used to access the files in the FTP directory.  For example, if the FTP Directory is accessible as "https://example.org/ftp/" then this would be set to "https:/example.org".
      default: https://example.org
    image_prompt:
      name: Image Prompt
      description: The prompt to be used for image analysis.
      default: >-
        What appears to be happening in this picture? Focus on the person, vehicle, or animal, not the surroundings. Provide details on the object.  Assume the subject is probably moving not stationary. If there is no obvious subject, say "No Subject Found". The description needs to be short enough to fit in a phone notification, using no more than 90 characters.
      selector:
        text:
          type: text
          multiline: true
    notification_target:
      name: Notification Target
      description: The target for the notification.
      default: notify.melissa_and_scotte_phones
    notification_message:
      name: Notification Message
      description: The message to be included in the notification.
      default: Camera Notification
    notification_group:
      name: Notification Group
      description: The group for the notification.
      default: Camera Notification 
    camera_entity_id:
      name: Camera Entity ID
      description: The entity ID of the camera for the Live view.
      default: camera.reolink_outdoorgarageeast_clear
      selector:
        entity:
          domain: camera
    talk_dashboard_url:
      name: Talk Dashboard URL
      description: The URL of the Lovelace dashboard that supports 2-way audio.
      default: /dashboard-cameras/garageoutdooreast


trigger:
- platform: state
  entity_id: !input 'trigger_sensors'
  to: "on"
  for:
    hours: 0
    minutes: 0
    seconds: 0

variables:
  # These are mostly kludges to be able to use the inputs as variables. Yuck.
  camera_entity: !input camera_entity_id
  url_root_prefix: !input url_root
  trigger_icons: !input trigger_icons
  trigger_sensors: !input trigger_sensors
  # When this action is run manually there is no trigger, so use "mdi:alert" as the icon rather than letting it break trying to look up the trigger.
  trigger_icon: >
    {% if trigger.entity_id is not undefined %}
      {{ trigger_icons[trigger_sensors.index(trigger.entity_id)] }}
    {% else %}
      {{ "mdi:alert" }}
    {% endif %}

action:
- delay: !input action_delay
  enabled: true
- service: fetch_latest_file.fetch
  data:
    FileName: !input ftp_filename
    Directory: !input ftp_directory
- service: ai_task.generate_data
  metadata: {}
  data:
    task_name: Describe Picture
    instructions: !input image_prompt
    attachments:
      media_content_id: "media-source://media_source{{ state_attr('sensor.fetch_latest_file','Image') }}"
      media_content_type: "image/jpeg"
  response_variable: ai_response
- if:
  - condition: template
    value_template: "{{ 'No Subject Found' not in ai_response.data }}"
  then:
    - service: !input notification_target
      data:
        message: !input notification_message
        data:
          image: "{{ url_root_prefix+state_attr('sensor.fetch_latest_file','Image') }}"
          notification_icon: "{{ trigger_icon }}"
          channel: Cameras
          group: !input notification_group
          visibility: private
          priority: high
          importance: high
          ttl: 0
          sticky: "true"
          subject: "{{ ai_response['data'] }}"
          clickAction: "{{ url_root_prefix+state_attr('sensor.fetch_latest_file','Video') }}"
          actions:
            - action: URI
              title: Live
              uri: entityId:{{ camera_entity }}
            - action: URI
              title: Talk
              uri: !input talk_dashboard_url
    - delay: !input final_delay

mode: single
